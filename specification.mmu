# Mono-Markup Specification

The Mono-Markup language is designed for dev-to-dev communication. It is designed to be easily read and parsed as is, and optionally be converted into a monospace, single-font-size output format. Of course, any other output format is also possible.

The syntax is very much inspired by markdown, but aims to be simpler and better suited for a monospace output. This is a toy project for my own diabolical needs, but I imagine the characteristics of this language might be appealing to some other devs.

I don't have any experience with written languages other than English, so I'd be very interested to know if there's anything here that would make this language ill-suited for a particular written language. I'd be receptive to changing things as necessary, and will bother the multi-lingual people I know to give me feedback.

## Block-level Structures

### Note on Blank Lines

The lines immediately preceeding and following a block-level structure must be blank. The first line of a document is considered to be preceeded by a blank line, and the last line of a document is considered to be followed by a blank line.

    Hello world

    # I'm a heading

    Those blank spaces are necesary

### Note on Block Annotations

Every block level structure can be immediately preceeded by zero or more annotation lines. Annotation lines are considered to be part of the block structure they are annotating.

An annotation line consists of a string of characters, parsed similarily to a set of HTML attributes, preceeded by a bang.

    !syntax="c++"
        printf("hello!");

### Global Annotations

A global annotation consists of one or more annotation lines. A global annotation line is a string of characters, parsed as ..., preceded by a bang.

!configuration for
!the rest of the document

Global annotation blocks can appear anywhere, but you should generally place them at the top of your document.

### Code Blocks

A code block consists of one or more indented chunks, separated by blank lines. An indented chunk is a sequence of non-blank lines, each indented by 4 or more spaces.

        printf("hello!");
        return 0;

        printf("I'm unreachable!");

Those wishing to extend this spec by adding new block components are encouraged to use annotated code blocks instead. For example, if you want to support embedding a dot graph, you could add support for the following to your renderer.

    !type="dotgraph"
        graph graphname {
            a -- b -- c;
            b -- d;
        }

### Headings

A heading consists of a string of characters, parsed as inline content, preceeded by one to six hashes.

The number of preceeding hashes is the "level" of the heading.

	# Some level 1 heading text!

    ## Some level 2 heading text

### Unordered Lists

An unordered list is a sequence of unordered list items and unordered list item continuations. The first item in the sequence must be an unordered list item (and not an unorderd list item continuation).

An unordered list item consists of a string of characters, parsed as inline content, preceeded by a 0 or more sets of 4 spaces, another space, an asterisk, and another space.

An unordered list item continuation consists of a string of characters, parsed as inline content, preceeded by 0 or more sets of 4 spaces, and three spaces.

     * I am a list
         * Hi
             * Bye
     * Space after asterisk is not necessary
     * And I am a list item
       that got broken into two lines

The continuation line must have the same number of sets of four spaces as the line preceeding it. In other words, the continuation must line up with the list item before it.

     * Item 1
         * Item 2
           I need to line up with Item 2.

### Ordered Lists

An ordered list has the same rules as an unordered list, but instead of an asterisk, it uses a hash symbol.

     # I am an ordered list
     # And I do list things
     # And I am a list item
       that got broken into two lines
         # Nested

### Block Quote

A black quote consists of a string of characters, parsed as inline content, preceeded by a right angle bracket.

>
    Hello I am a block quote
    and I am great

    !author="John Sullivan" class="Awesome"
    >
        But how are you doing?
        That's really the questino
    
    Because I'm doing great, thanks for asking man
    
    >
        Yeah! I'm so cool.
    
            printf("john")
    
        >
            Seriously, that guys so cool!


### Paragraph

If a block is not any of the other components listed, it is considered a paragraph.
